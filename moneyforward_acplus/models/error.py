# coding: utf-8

"""
    マネーフォワードクラウド会計Plus API

    マネーフォワードクラウド会計PlusのAPI  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: yasuhiroota26@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from moneyforward_acplus.configuration import Configuration


class Error(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'title': 'str',
        'detail': 'str',
        'errors': 'list[ErrorDetail]'
    }

    attribute_map = {
        'type': 'type',
        'title': 'title',
        'detail': 'detail',
        'errors': 'errors'
    }

    def __init__(self, type='internal_error', title=None, detail=None, errors=None, local_vars_configuration=None):  # noqa: E501
        """Error - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._title = None
        self._detail = None
        self._errors = None
        self.discriminator = None

        self.type = type
        self.title = title
        self.detail = detail
        if errors is not None:
            self.errors = errors

    @property
    def type(self):
        """Gets the type of this Error.  # noqa: E501

        エラー種別:   * `validation_failed`: リクエストボディやパラメータのバリデーションエラー   * `operation_not_completed`: 処理待ちや処理中のリクエストに対し、ファイルダウンロードや削除を要求した   * `invalid_credential`: 認証・認可情報が不正   * `permission_denied`: APIを実行する権限がない   * `request_not_found`: 指定された作成要求IDが存在しない   * `data_creation_failed`: 作成要求を受けたが、その後の処理でデータやファイル生成に失敗した   * `unsupported_media_type`: APIでサポートされていないリクエスト形式。Content-Type が不正な場合など。   * `internal_error`: 内部エラー   # noqa: E501

        :return: The type of this Error.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Error.

        エラー種別:   * `validation_failed`: リクエストボディやパラメータのバリデーションエラー   * `operation_not_completed`: 処理待ちや処理中のリクエストに対し、ファイルダウンロードや削除を要求した   * `invalid_credential`: 認証・認可情報が不正   * `permission_denied`: APIを実行する権限がない   * `request_not_found`: 指定された作成要求IDが存在しない   * `data_creation_failed`: 作成要求を受けたが、その後の処理でデータやファイル生成に失敗した   * `unsupported_media_type`: APIでサポートされていないリクエスト形式。Content-Type が不正な場合など。   * `internal_error`: 内部エラー   # noqa: E501

        :param type: The type of this Error.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["validation_failed", "operation_not_completed", "invalid_credential", "permission_denied", "request_not_found", "data_creation_failed", "unsupported_media_type", "internal_error"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def title(self):
        """Gets the title of this Error.  # noqa: E501

        エラー概要  # noqa: E501

        :return: The title of this Error.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Error.

        エラー概要  # noqa: E501

        :param title: The title of this Error.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def detail(self):
        """Gets the detail of this Error.  # noqa: E501

        エラーの詳細な説明  # noqa: E501

        :return: The detail of this Error.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Error.

        エラーの詳細な説明  # noqa: E501

        :param detail: The detail of this Error.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and detail is None:  # noqa: E501
            raise ValueError("Invalid value for `detail`, must not be `None`")  # noqa: E501

        self._detail = detail

    @property
    def errors(self):
        """Gets the errors of this Error.  # noqa: E501

        エラー詳細のリスト  # noqa: E501

        :return: The errors of this Error.  # noqa: E501
        :rtype: list[ErrorDetail]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Error.

        エラー詳細のリスト  # noqa: E501

        :param errors: The errors of this Error.  # noqa: E501
        :type: list[ErrorDetail]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Error):
            return True

        return self.to_dict() != other.to_dict()
